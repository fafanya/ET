// <auto-generated />
using System;
using ClientCommon;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClientCommon.Migrations
{
    [DbContext(typeof(ClientDBContext))]
    partial class ClientDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("ClientCommon.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Text");

                    b.HasKey("TaskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ClientCommon.TaskInstance", b =>
                {
                    b.Property<int>("TaskInstanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CorrectAnswerAmount");

                    b.Property<int>("IncorrectAnswerAmount");

                    b.Property<int>("SeqNo");

                    b.Property<int>("TaskId");

                    b.Property<int>("TestId");

                    b.HasKey("TaskInstanceId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TestId");

                    b.ToTable("TaskInstances");
                });

            modelBuilder.Entity("ClientCommon.TaskItem", b =>
                {
                    b.Property<int>("TaskItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LangItemId");

                    b.Property<int?>("ParentId");

                    b.Property<int>("SeqNo");

                    b.Property<int?>("TaskId");

                    b.Property<int?>("TaskInstanceId");

                    b.Property<int?>("UITypeId");

                    b.Property<int?>("ValueInt");

                    b.Property<string>("ValueString");

                    b.HasKey("TaskItemId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskInstanceId");

                    b.HasIndex("UITypeId");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("ClientCommon.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CorrectAnswerAmount");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Header");

                    b.Property<int>("IncorrectAnswerAmount");

                    b.HasKey("TestId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("ClientCommon.UIType", b =>
                {
                    b.Property<int>("UITypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("UITypeId");

                    b.ToTable("UITypes");
                });

            modelBuilder.Entity("ClientCommon.TaskInstance", b =>
                {
                    b.HasOne("ClientCommon.Task", "Task")
                        .WithMany("TaskInstances")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClientCommon.Test", "Test")
                        .WithMany("TaskInstances")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClientCommon.TaskItem", b =>
                {
                    b.HasOne("ClientCommon.TaskItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("ClientCommon.Task", "Task")
                        .WithMany("TaskItems")
                        .HasForeignKey("TaskId");

                    b.HasOne("ClientCommon.TaskInstance", "TaskInstance")
                        .WithMany("TaskItems")
                        .HasForeignKey("TaskInstanceId");

                    b.HasOne("ClientCommon.UIType", "UIType")
                        .WithMany("TaskItems")
                        .HasForeignKey("UITypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
